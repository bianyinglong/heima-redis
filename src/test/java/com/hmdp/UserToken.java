package com.hmdp;import cn.hutool.json.JSONUtil;import com.hmdp.dto.LoginFormDTO;import com.hmdp.dto.Result;import com.hmdp.entity.User;import com.hmdp.service.IUserService;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import java.io.FileOutputStream;import java.io.OutputStreamWriter;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)@AutoConfigureMockMvcpublic class UserToken {    @Autowired    MockMvc mockMvc;    @Autowired    private IUserService userService;    @Test    public void getToken() throws Exception {        String phone = "";        String code = "";        System.out.println(userService);        //注意！这里的绝对路径设置为自己想要的地方        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("/Users/bianyinglong/Java/redis-pro02/hm-dianping/src/main/resources/token.txt"));        //先模拟10个用户的登录        for (int i = 10; i < 1010; i++) {            //通过id从数据库中获得user对象            User user = userService.getById(i);            System.out.println(user);            phone = user.getPhone();            //创建虚拟请求，模拟通过手机号，发送验证码            ResultActions perform1 = mockMvc.perform(MockMvcRequestBuilders                    .post("/user/code?phone=" + phone));            //获得Response的body信息            String resultJson1 = perform1.andReturn().getResponse().getContentAsString();            //将结果转换为result对象            Result result = JSONUtil.toBean(resultJson1, Result.class);            //获得验证码            code = result.getData().toString();            //创建登录表单            LoginFormDTO loginFormDTO = new LoginFormDTO();            loginFormDTO.setCode(code);            loginFormDTO.setPhone(phone);            //将表单转换为json格式的字符串            String loginFormDtoJson = JSONUtil.toJsonStr(loginFormDTO);            //创建虚拟请求，模拟登录            ResultActions perform2 = mockMvc.perform(MockMvcRequestBuilders.post("/user/login")                    //设置contentType表示为json信息                    .contentType(MediaType.APPLICATION_JSON)                    //放入json对象                    .content(loginFormDtoJson));            String resultJson2 = perform2.andReturn().getResponse().getContentAsString();            Result result2 = JSONUtil.toBean(resultJson2, Result.class);            //获得token            String token = result2.getData().toString();            //写入            osw.write(token+"\n");        }        //关闭输出流        osw.close();    }}