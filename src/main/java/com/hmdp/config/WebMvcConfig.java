package com.hmdp.config;import com.hmdp.utils.LoginInterceptor;import com.hmdp.utils.RefreshTokenInterceptor;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.web.servlet.config.annotation.CorsRegistry;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import javax.annotation.Resource;@Configurationpublic class WebMvcConfig implements WebMvcConfigurer {//    @Resource//    private StringRedisTemplate stringRedisTemplate;////    @Override//    public void addInterceptors(InterceptorRegistry registry) {//////        // 先判断是否有token, 如果有则根据token从redis中获取user信息保存到ThreadLocal中////        registry.addInterceptor(new RefreshTokenInterceptor(stringRedisTemplate)).addPathPatterns("/**").order(0);////////        // 从ThreadLocal中获取user，有则放行，没有则直接返回////        registry.addInterceptor(new LoginInterceptor())////                .excludePathPatterns(////                        "/shop/**",////                        "/voucher/**",////                        "/shop-type/**",////                        "/upload/**",////                        "/blog/hot",////                        "/user/code",////                        "/user/login"////                ).order(1);//    }    @Resource    private StringRedisTemplate stringRedisTemplate;    @Override    public void addInterceptors(InterceptorRegistry registry) {        // 登录拦截器        registry.addInterceptor(new LoginInterceptor())                .excludePathPatterns(                        "/shop/**",                        "/voucher/**",                        "/shop-type/**",                        "/upload/**",                        "/blog/hot",                        "/user/code",                        "/user/login"                ).order(1);        // token刷新的拦截器        registry.addInterceptor(new RefreshTokenInterceptor(stringRedisTemplate)).addPathPatterns("/**").order(0);    }    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping("/**")                .allowCredentials(true)                .allowedOrigins("*")                .allowedHeaders("*")                .allowedMethods("*")                .maxAge(3600);    }}